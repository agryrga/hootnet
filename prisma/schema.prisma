generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String?
  nickname      String?        @unique
  avatarUrl     String?
  bio           String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  dislikes      Dislike[]
  subscriptions Subscription[] @relation("UserSubscriptions")
  subscribers   Subscription[] @relation("UserSubscribers")
  isBanned      Boolean        @default(false)
}

model Post {
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  title     String
  content   String
  tags      String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  dislikes  Dislike[]
  isDeleted Boolean   @default(false)
}

model Comment {
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  dislikes  Dislike[]
  isDeleted Boolean   @default(false)
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  createdAt DateTime @default(now())
}

model Dislike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  createdAt DateTime @default(now())
}

model Subscription {
  id             Int      @id @default(autoincrement())
  subscriber     User     @relation("UserSubscriptions", fields: [subscriberId], references: [id])
  subscriberId   Int
  subscribedTo   User     @relation("UserSubscribers", fields: [subscribedToId], references: [id])
  subscribedToId Int
  createdAt      DateTime @default(now())

  @@unique([subscriberId, subscribedToId])
}
